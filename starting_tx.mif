DEPTH = 16384; -- 8 x 2KB
WIDTH = 8;    -- chracter width 8
ADDRESS_RADIX = DEC;
DATA_RADIX = HEX;

CONTENT BEGIN

-- Actual ARP packet
00: ff; -- Dest address
01: ff;
02: ff;
03: ff;
04: ff;
05: ff;
06: 06; -- Source address 
07: e0;
08: 4c;
09: DF;
10: DF;
11: DF;
12: 08; -- Packet type (ARP)
13: 06;
14: 00; -- ARP START - ARP Hardware Type
15: 01;
16: 08; -- Protocol - IPv4
17: 00;
18: 06; -- Hardware size: 6
19: 04; -- Protocol size: 4
20: 00; -- Opcode: 0x0001 (Request)
21: 01;
22: 06; -- Sender MAC (made up)
23: e0;
24: 4c;
25: DF;
26: DF;
27: DF;
28: 10; -- Sender IP (Made up)
29: DF;
30: DE;
31: AD;
32: 00; -- Target MAC (anyone)
33: 00;
34: 00;
35: 00;
36: 00;
37: 00;
38: ff; -- Target IP (anyone)
39: ff;
40: ff;
41: ff;
42: 00; -- (Trailer begin)
43: 00;
44: 00;
45: 00;
46: 00;
47: 00;
48: 00;
49: 00;
50: 00;
51: 00;
52: 00;
53: 00;
54: 00;
55: 00;
56: 00;
57: 00;
58: 00;
59: 00; -- END OF PACKET



-- >>> for x in range (2048, 2108):
-- ...   print("{0:d}: {1:02x};".format(x, (x % 256)))
-- ...
2048: 00;
2049: 01;
2050: 02;
2051: 03;
2052: 04;
2053: 05;
2054: 06;
2055: 07;
2056: 08;
2057: 09;
2058: 0a;
2059: 0b;
2060: 0c;
2061: 0d;
2062: 0e;
2063: 0f;
2064: 10;
2065: 11;
2066: 12;
2067: 13;
2068: 14;
2069: 15;
2070: 16;
2071: 17;
2072: 18;
2073: 19;
2074: 1a;
2075: 1b;
2076: 1c;
2077: 1d;
2078: 1e;
2079: 1f;
2080: 20;
2081: 21;
2082: 22;
2083: 23;
2084: 24;
2085: 25;
2086: 26;
2087: 27;
2088: 28;
2089: 29;
2090: 2a;
2091: 2b;
2092: 2c;
2093: 2d;
2094: 2e;
2095: 2f;
2096: 30;
2097: 31;
2098: 32;
2099: 33;
2100: 34;
2101: 35;
2102: 36;
2103: 37;
2104: 38;
2105: 39;
2106: 3a;
2107: 3b;


%
-- Slot 0: ARP request
[0000..0005]: 00 11 22 33 44 55;
[0006..000B]: FF EE DD CC BB AA;
[000C..000D]: 08 06; -- Packet type (ARP)
[000E..000F]: 00 01; -- ARP START - ARP Hardware Type
[0010..0011]: 08 00;  -- Protocol - IPv4
 0012       : 06;  -- Hardware size: 6
 0013       : 04;  -- Protocol size: 4
[0014..0015]: 00 01; -- Opcode: 0x0001 (Request)
[0016..001B]: 06 e0 4c DF DF DF;  -- Sender MAC (made up) 
[001C..001F]: 10 DF DE AD;  -- Sender IP (Made up) 
[0020..0025]: 00 00 00 00 00 00; -- Target MAC (anyone)
[0026..0029]: ff ff ff ff;  -- Target IP (anyone) 
-- Add trailer of whatever length necessary (e.g., 60)

-- Slot 1: Testing values
0800: 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF 00;
0810: 01 23 45 67 89 AB CD EF 01 32 54 76 98 BA DC FE;
0820: 12 34 56 78 9A BC DE F0 DF 15 C0 01 55 77 FF 00;
0830: FE DC BA 98 76 54 32 10 01 23 45 67 89 AB CD EF;
-- Add trailer of whatever length necessary (0 necessary in this case)
%

%
-- Simple test vector starting at 0x11
-- Modelsim/Questa for whatever reason does not like this and gets byte 0 wrong
-- Python 3:
-- >>> for x in range (0, 70):
-- ...   print("{0:d}: {1:02x};".format(x, x+17))
-- ...
0: 11;
1: 12;
2: 13;
3: 14;
4: 15;
5: 16;
6: 17;
7: 18;
8: 19;
9: 1a;
10: 1b;
11: 1c;
12: 1d;
13: 1e;
14: 1f;
15: 20;
16: 21;
17: 22;
18: 23;
19: 24;
20: 25;
21: 26;
22: 27;
23: 28;
24: 29;
25: 2a;
26: 2b;
27: 2c;
28: 2d;
29: 2e;
30: 2f;
31: 30;
32: 31;
33: 32;
34: 33;
35: 34;
36: 35;
37: 36;
38: 37;
39: 38;
40: 39;
41: 3a;
42: 3b;
43: 3c;
44: 3d;
45: 3e;
46: 3f;
47: 40;
48: 41;
49: 42;
50: 43;
51: 44;
52: 45;
53: 46;
54: 47;
55: 48;
56: 49;
57: 4a;
58: 4b;
59: 4c;
60: 4d;
61: 4e;
62: 4f;
63: 50;
64: 51;
65: 52;
66: 53;
67: 54;
68: 55;
69: 56;
%





END;